use std::cell::RefCell;
use std::rc::Rc;

pub enum PropertiesCoproduct {
    /* entries generated via properties-coproduct-lib.tera */
    None,
    RepeatList(Vec<Rc<RefCell<PropertiesCoproduct>>>),
    RepeatItem(Rc<PropertiesCoproduct>, usize),
    isize(isize),
    Range_isize_(std::ops::Range<isize>),

    {% for properties_coproduct_tuple in properties_coproduct_tuples %}
    {{properties_coproduct_tuple.0}}({{properties_coproduct_tuple.1}}),
    {% endfor %}
}

//The following two conversions are used by Repeat to use an Rc<PropertiesCoproduct>
//opaquely in RIL in combination with numerics, using `.into()` on the instance
//of the Rc<PropertiesCoproduct>
//impl From<std::rc::Rc<PropertiesCoproduct>> for PropertiesCoproduct {
//    fn from(rc: Rc<PropertiesCoproduct>) -> Self {
//        (*rc).clone()
//    }
//}
//impl From<PropertiesCoproduct> for pax_runtime_api::numeric::Numeric {
//    fn from(pc: PropertiesCoproduct) -> Self {
//        if let PropertiesCoproduct::isize(i) = pc {
//            pax_runtime_api::numeric::Numeric::from(i) //special handling of `isize`, for use with Repeat
//        } else {
//            unreachable!()
//        }
//    }
//}

//used namely for return types of expressions â€” may have other purposes
pub enum TypesCoproduct {
    {% for types_coproduct_tuple in types_coproduct_tuples %}
    {{types_coproduct_tuple.0}}({{types_coproduct_tuple.1}}),
    {% endfor %}
}
