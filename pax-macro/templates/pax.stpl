#[cfg(feature = "parser")]
use pax::internal::{Reflectable};
#[cfg(feature = "parser")]
use pax_compiler::parsing::TypeParsable;
#[cfg(feature = "parser")]
use serde_json;

<% if is_main_component { %>
// For the main (application-root) component only, a `main` is generated for the `parser` bin target.
// This method bootstraps the parsing process, parsing not only the main/application-root component
// but every component/primitive found in its extended render tree. This main method
// also returns the parsed, serialized PaxManifest via stdio (println)
#[cfg(feature = "parser")]
pub fn main() {

    let mut ctx = pax_compiler::parsing::ParsingContext::default();

    let (mut ctx, _) = <%= pascal_identifier %>::parse_to_manifest(ctx);

    let manifest = pax_compiler::manifest::PaxManifest {
        components: ctx.component_definitions,
        main_component_id: ctx.main_component_id,
        expression_specs: None,
    };

    //Send data back to parent process by printing to stdout
    println!("{}", &serde_json::to_string_pretty(&manifest).unwrap());
    std::process::exit(0);
}

//For root only, and only when we're NOT parsing, include reexports
//Parsing is excluded because the `pub mod pax_reexports` snippet can only be generated
//after parsing.

<%= reexports_snippet %>
<% } else { %>
//WARNING: No pax_reexports were introduced by macro because no PAX_DIR env
//was specified for compiled project.
<% } %>

#[cfg(feature = "parser")]
impl <%= pascal_identifier %> {
    // For all components, a parse_to_manifest is generated under the `parser` feature
    // so that the parser binary may traverse all dependencies.
    // This method is the recursive workhorse of parsing logic.
    // One way to look at this, in conjunction with the `parser` bin target: a solution to "coordinating between macros"
    pub fn parse_to_manifest(mut ctx: pax_compiler::parsing::ParsingContext) -> (pax_compiler::parsing::ParsingContext, String) {

        let source_id = <%= pascal_identifier %>::get_source_id();
        let mut property_definitions = vec![];

        // Populate `PropertyDefinition`s
        <% for spd in static_property_definitions { %>
            //Here we bridge from pure static analysis into some dynamic analysis via `parser`, in order
            //to fully qualify module paths for scoped atomic types.

            let mut fully_qualified_constituent_types = vec![];
            let mut dep_to_fqd_map = std::collections::HashMap::new();
            <% for scoped_resolvable_type in spd.scoped_resolvable_types { %>
                let fqd = <%= scoped_resolvable_type %>::get_fully_qualified_path("<%= scoped_resolvable_type %>");
                dep_to_fqd_map.insert("<%= scoped_resolvable_type %>",fqd.clone());

                fully_qualified_constituent_types.push(
                    fqd
                );

                let mut ctx = <%= scoped_resolvable_type %>::parse_type_to_manifest(ctx);
            <% } %>

            let (mut ctx, type_definition) =  pax_compiler::parsing::assemble_type_definition(
                ctx,
                "<%= spd.original_type %>",
                fully_qualified_constituent_types.clone(),
                &dep_to_fqd_map,
            );

            property_definitions.push(pax_compiler::manifest::PropertyDefinition {
                name: "<%= spd.field_name %>".to_string(),
                type_definition: type_definition,
                flags: None,
            });
        <% } %>
        ctx.all_property_definitions.insert(source_id.to_string(), property_definitions);

        //FUTURE: mitigate injection risk here -- notable risk if dealing with untrusted input.  A mitigation may be to sanitize/validate/parse `raw_pax` before templating.

        const raw_pax: &str = r#####"<%= raw_pax %>
"#####;
        match ctx.visited_source_ids.get(&source_id as &str) {

            None => {
                //First time visiting this file/source â€” parse the relevant contents
                //then recurse through child nodes, unrolled here in the macro as
                //parsed from the template
                ctx.visited_source_ids.insert(source_id.clone().into());

                <% for dep in template_dependencies { %>
                let (mut ctx, component_id) = <%= dep %>::parse_to_manifest(ctx);
                ctx.template_map.insert("<%= dep %>".into(), component_id);
                <% } %>

                let PASCAL_IDENTIFIER = "<%= pascal_identifier %>";

                let template_map= ctx.template_map.clone();

                let (mut ctx, comp_def) =
                    pax_compiler::parsing::assemble_component_definition(
                        ctx,
                        &raw_pax,
                        PASCAL_IDENTIFIER,
                        <%= is_main_component %>,
                        template_map,
                        &source_id,
                        module_path!(),
                    );

                ctx.component_definitions
                    .insert(comp_def.source_id.clone(), comp_def);

                (ctx, source_id.to_string())
            },
            _ => (ctx, source_id.to_string()), //early return; this file has already been parsed
        }
    }
}

#[cfg(feature = "parser")]
impl pax_message::reflection::Reflectable for <%= pascal_identifier %> {

    fn get_source_id() -> String {
        file!().to_string() + "::" + "<%= pascal_identifier %>"
    }

    fn get_fully_qualified_path(atomic_self_type: &str) -> String {
        //this type may come in qualified, e.g. with `crate::some::mod::some::Type`
        //in this case, we want only `Type`.  This is a crude heuristic and may need to be revisited.
        let chopped_type = {
            if atomic_self_type.contains("::") {
                atomic_self_type.split("::").last().unwrap()
            } else {
                atomic_self_type
            }
        };
        module_path!().to_owned().replacen("parser", "crate", 1) + "::" + chopped_type
    }
}