#[cfg(feature = "parser")]
use pax::internal::{Reflectable};
#[cfg(feature = "parser")]
use pax_compiler::parsing::TypeParsable;
#[cfg(feature = "parser")]
use serde_json;

<% if is_main_component { %>
// For the main (application-root) component only, a `main` is generated for the `parser` bin target.
// This method bootstraps the parsing process, parsing not only the main/application-root component
// but every component/primitive found in its extended render tree. This main method
// also returns the parsed, serialized PaxManifest via stdio (println)
#[cfg(feature = "parser")]
pub fn main() {

    let mut ctx = pax_compiler::parsing::ParsingContext::default();

    let (mut ctx, _) = <%= pascal_identifier %>::parse_to_manifest(ctx);

    let manifest = pax_compiler::manifest::PaxManifest {
        components: ctx.component_definitions,
        main_component_type_id: ctx.main_component_type_id,
        expression_specs: None,
        type_table: ctx.type_table,
    };

    //Send data back to parent process by printing to stdout
    println!("{}", &serde_json::to_string_pretty(&manifest).unwrap());
    std::process::exit(0);
}

//For root only, and only when we're NOT parsing, include reexports
//Parsing is excluded because the `pub mod pax_reexports` snippet can only be generated
//after parsing.

<%= reexports_snippet %>
<% } else { %>
//WARNING: No pax_reexports were introduced by macro because no PAX_DIR env
//was specified for compiled project.
<% } %>

#[cfg(feature = "parser")]
impl <%= pascal_identifier %> {
    // For all components, a parse_to_manifest is generated under the `parser` feature
    // so that the parser binary may traverse all dependencies.
    // This method is the recursive workhorse of parsing logic.
    // One way to look at this, in conjunction with the `parser` bin target: a solution to "coordinating between macros"
    pub fn parse_to_manifest(mut ctx: pax_compiler::parsing::ParsingContext) -> (pax_compiler::parsing::ParsingContext, String) {

        let self_type_id = <%= pascal_identifier %>::get_type_id("<%= pascal_identifier %>");
        let mut property_definitions = vec![];

        // Populate `PropertyDefinition`s
        <% for spd in static_property_definitions { %>
            //Here we bridge from pure static analysis into some dynamic analysis via `parser`, in order
            //to fully qualify module paths for scoped atomic types.

            let mut fully_qualified_constituent_types = vec![];

            //Special-handle the root scoped_resolvable_type (the one whose properties
            //must be available as nested symbols in PAXEL, like `foo.bar`).  Specifically,
            //we need the Vec<PropertyDefinitions> for that root type.
            let (mut ctx, mut sub_property_definitions) = <%= spd.root_scoped_resolvable_type %>::parse_type_to_manifest(ctx);

            <% for scoped_resolvable_type in spd.scoped_resolvable_types { %>
                let fqd = <%= scoped_resolvable_type %>::get_type_id("<%= scoped_resolvable_type %>");

                fully_qualified_constituent_types.push(
                    fqd
                );

                //Parse each scoped resolvable type, but no need to track the sub_property_definitions like we did for the root scoped resolvable type
                let (mut ctx, _) = <%= scoped_resolvable_type %>::parse_type_to_manifest(ctx);
            <% } %>

            let property_type_id = <%= spd.root_scoped_resolvable_type %>::get_type_id("<%= spd.pascal_identifier %>");

            let (mut ctx, _type_def) =  pax_compiler::parsing::assemble_type_definition(
                ctx,
                "<%= spd.original_type %>",
                fully_qualified_constituent_types.clone(),
                sub_property_definitions,
                &property_type_id,
            );

            property_definitions.push(pax_compiler::manifest::PropertyDefinition {
                name: "<%= spd.field_name %>".to_string(),
                type_id: property_type_id,
                flags: None,
            });
        <% } %>

        //FUTURE: mitigate injection risk here -- notable risk if dealing with untrusted input.  A mitigation may be to sanitize/validate/parse `raw_pax` before templating.

        const raw_pax: &str = r#####"<%= raw_pax %>
"#####;
        match ctx.visited_type_ids.get(&self_type_id as &str) {

            None => {
                //First time visiting this file/source â€” parse the relevant contents
                //then recurse through child nodes, unrolled here in the macro as
                //parsed from the template
                ctx.visited_type_ids.insert(self_type_id.clone().into());

                <% for dep in template_dependencies { %>
                let (mut ctx, dep_type_id) = <%= dep %>::parse_to_manifest(ctx);
                ctx.template_map.insert("<%= dep %>".into(), dep_type_id.clone());
                <% } %>

                const PASCAL_IDENTIFIER : &str = "<%= pascal_identifier %>";

                let template_map= ctx.template_map.clone();

                let (mut ctx, self_type_definition) =  pax_compiler::parsing::assemble_type_definition(
                    ctx,
                    PASCAL_IDENTIFIER,
                    vec![module_path!().to_string() + "::" + PASCAL_IDENTIFIER],
                    property_definitions.clone(),
                    &self_type_id,
                );

                let (mut ctx, comp_def) =
                    pax_compiler::parsing::assemble_component_definition(
                        ctx,
                        &raw_pax,
                        PASCAL_IDENTIFIER,
                        <%= is_main_component %>,
                        template_map,
                        module_path!(),
                        &self_type_id,
                    );

                ctx.component_definitions
                    .insert(self_type_id.clone(), comp_def);

                (ctx, self_type_id)
            },
            _ => (ctx, self_type_id), //early return; this file has already been parsed
        }
    }
}

#[cfg(feature = "parser")]
impl pax_message::reflection::Reflectable for <%= pascal_identifier %> {

    fn get_type_id(pascal_identifier: &str) -> String {
        let chopped_type = {
            if pascal_identifier.contains("::") {
                pascal_identifier.split("::").last().unwrap()
            } else {
                pascal_identifier
            }
        };
        module_path!().to_owned().replacen("parser", "crate", 1) + "::" + chopped_type
    }
}