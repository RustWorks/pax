<% if include_imports { %>
#[cfg(feature = "parser")]
use pax::internal::{Reflectable};
#[cfg(feature = "parser")]
use pax_compiler::parsing::TypeParsable;
<% } %>
#[cfg(feature = "parser")]
impl <%= pascal_identifier %> {
    pub fn parse_to_manifest(mut ctx: pax_compiler::parsing::ParsingContext) -> (pax_compiler::parsing::ParsingContext, String) {
        let type_id = <%= pascal_identifier %>::get_type_id();
        match ctx.visited_type_ids.get(&type_id as &str) {
            None => {
                //First time visiting this file/source â€” parse the relevant contents
                //then recurse through child nodes, unrolled here in the macro as
                //parsed from the template
                ctx.visited_type_ids.insert(type_id.to_string());
                let PASCAL_IDENTIFIER = "<%= pascal_identifier %>";
                ctx.template_map.insert(PASCAL_IDENTIFIER.to_string(), type_id.to_string());
                let template_map= ctx.template_map.clone();

                let mut property_definitions : Vec<pax_compiler::manifest::PropertyDefinition> = vec![];
                let mut dep_to_fqd_map = std::collections::HashMap::new();

                // Populate `PropertyDefinition`s
                <% for spd in static_property_definitions { %>
                    //Here we bridge from pure static analysis into some dynamic analysis via `parser`, in order
                    //to fully qualify module paths for scoped atomic types.

                    let mut fully_qualified_constituent_types = vec![];

                    //Special-handle the root scoped_resolvable_type (the one whose properties
                    //must be available as nested symbols in PAXEL, like `foo.bar`).  Specifically,
                    //we want need the Vec<PropertyDefinitions> for that root type.
                    let (mut ctx, mut sub_property_definitions) = <%= spd.root_scoped_resolvable_type %>::parse_type_to_manifest(ctx);

                    <% for scoped_resolvable_type in spd.scoped_resolvable_types { %>
                        let fqd = <%= scoped_resolvable_type %>::get_fully_qualified_path("<%= scoped_resolvable_type %>");
                        dep_to_fqd_map.insert("<%= scoped_resolvable_type %>",fqd.clone());

                        fully_qualified_constituent_types.push(
                            fqd
                        );

                        //Parse each scoped resolvable type, but no need to track the child property_definitions like we did for the root scoped resolvable type
                        let (mut ctx, _) = <%= scoped_resolvable_type %>::parse_type_to_manifest(ctx);
                    <% } %>

                    let (mut ctx, type_definition) = pax_compiler::parsing::assemble_type_definition(
                        ctx,
                        "<%= spd.original_type %>",
                        fully_qualified_constituent_types.clone(),
                        &dep_to_fqd_map,
                        sub_property_definitions,
                    );

                    property_definitions.push(pax_compiler::manifest::PropertyDefinition {
                        name: "<%= spd.field_name %>".to_string(),
                        type_id: type_definition.type_id,
                        flags: None,
                    });

                <% } %>

                let (mut ctx, self_type_definition) = pax_compiler::parsing::assemble_type_definition(
                    ctx,
                    PASCAL_IDENTIFIER,
                    vec![],
                    &dep_to_fqd_map,
                    property_definitions.clone(),
                );

                let comp_def = pax_compiler::parsing::assemble_primitive_definition(
                    PASCAL_IDENTIFIER,
                    module_path!(),
                    &property_definitions,
                    "<%=  primitive_instance_import_path  %>".to_string(),
                    &self_type_definition.type_id,
                );
                ctx.component_definitions
                    .insert(comp_def.type_id.clone(), comp_def);
                (ctx, type_id.to_string())
            },
            _ => (ctx, type_id.to_string()), //early return; this file has already been parsed
        }
    }
}

#[cfg(feature = "parser")]
impl pax_message::reflection::Reflectable for <%= pascal_identifier %> {

    fn get_type_id() -> String {
        file!().to_string() + "::" + "<%= pascal_identifier %>"
    }

    fn get_fully_qualified_path(atomic_self_type: &str) -> String {
        //this type may come in qualified, e.g. with `crate::some::mod::some::Type`
        //in this case, we want only `Type`.  This is a crude heuristic and may need to be revisited.
        let chopped_type = {
            if atomic_self_type.contains("::") {
                atomic_self_type.split("::").last().unwrap()
            } else {
                atomic_self_type
            }
        };
        module_path!().to_owned().replacen("parser", "crate", 1) + "::" + chopped_type
    }
}